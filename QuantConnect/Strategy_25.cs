

# Strategy_TrendFollowing.py

from QuantConnect.Data.Market import TradeBar
from QuantConnect.Indicators import LinearRegressionIndicator
from QuantConnect.Orders import OrderStatus, OrderType, StopMarketOrder
from datetime import timedelta


class TrendFollowing(QCAlgorithm):
    
    def Initialize(self):
        self.SetStartDate(2010, 1, 1)
        self.SetEndDate(2020, 1, 1)
        self.SetCash(100000)
        
        self.symbol = self.AddEquity("SPY", Resolution.Daily).Symbol
        self.lr = LinearRegressionIndicator("LR", 30)
        
        self.atr = self.ATR(self.symbol, 14)
        self.stop_factor = 1
        
        self.last_trade = None
        
    def OnData(self, data: TradeBar):
        if not (self.lr.IsReady and data.Close > 0): return
        
        # Long position entry criteria
        if data.Close > self.lr.Current.Value and not self.Portfolio.Invested:
            stop_price = data.Close - (self.atr.Current.Value * self.stop_factor)
            self.last_trade = self.StopMarketOrder(self.symbol, -self.Portfolio.Cash / data.Close, stop_price)
        
        # Short position entry criteria
        elif data.Close < self.lr.Current.Value and not self.Portfolio.Invested:
            stop_price = data.Close + (self.atr.Current.Value * self.stop_factor)
            self.last_trade = self.StopMarketOrder(self.symbol, -self.Portfolio.Cash / data.Close, stop_price)

        
    def OnOrderEvent(self, orderEvent):
        
        if orderEvent.Status != OrderStatus.Filled: return
        
        # Update stop loss on filled order
        if orderEvent.OrderId == self.last_trade.Id:
            if orderEvent.OrderDirection == OrderDirection.Buy:
                stop_price = orderEvent.FillPrice - (self.atr.Current.Value * self.stop_factor)
                if not float.IsNaN(stop_price):
                    stop_loss_order = StopMarketOrder(self.symbol, -self.Portfolio[self.symbol].Quantity,
                                                      stop_price,
                                                      "Stop Loss")
                    stop_loss_order.Tag = "Exit"
                    submitted_stop_market_order_ticket = None

                    # check for existing stops in place and cancel them before submitting a new one
                    for ticket in self.Transactions.GetOpenOrders():
                        if ticket.OrderId == stop_loss_order.Id:
                            continue

                        if ticket.Status == OrderStatus.Submitted and ticket.Type == OrderType.StopMarket:
                            submitted_stop_market_order_ticket = ticket

                        elif ticket.Type == OrderType.StopMarket:
                            # we have a live stop market order already placed so cancel it before submitting this one
                            existing_stop_market_order_ticket = None
                            existing_stop_market_order_ticket.Cancel("Replaced by new StopLoss")
                            existing_stop_market_order_ticket.WaitUntilFilled()
                            break

                    if submitted_stop_market_order_ticket is not None:
                        # if we have a submitted live order we need to wait until it is filled before replacing it with this new one.
                        submitted_stop_market_order_ticket.Cancel("Replaced by new StopLoss")
                        submitted_stop_market_order_ticket.WaitUntilFilled()

                    # submit our new stop loss.
                    submit_success = (self.Transactions.SubmitOrder(stop_loss_order) is not None)

    def OnEndOfDay(self):
        
        # Exit criteria
        current_holdings_value=0.0
        
            
       
                
    
        
        
        
        
        
        
        
        
        
        
        
        

        
        



    

        

        

            


        

        

        
        
        
        
        
        


        
        
        
            



    
        
    
        
        
        
    
        





        




        





    

    
    
    





        





    

    
    
    





    






        
        
        
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    





        




    

    
    
    





    






        

        
        
    
    


    
    
    
    
    
    





        
    
    


    
    
    
    
    
        
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    


            
            
            
            
            
            









            
            

























 

            
            
            
            








    
  
            

            
            
            
            








    
  
            

            
            
            
            








    
  
            

            
            
            
            








    
  
            

            
            
            
            








    
  
            

            
            
            
            

























 

                
                
                
                
                
                
                
                
                
                
                
                



























                











































 


 

                
                
                
                

                

                
                
                
                

                

                
                
                
                

                

                
                
                
                

                

                
                
                
                

                

                    
                    
                    
                    

























































 
                    
                    
                    
                    



























































 
                    
                    
                    
                    













































 

                    




        
        
        
        
       
               
        
        
       
               
        
        
       
               
        
        
       
               
        
        
       
               
        
        
       
               
        
        
       
               
                
               
                
               
                 
                        
                        
                        
                        
                        
                        
                         
                 
                      
                  
                     
             
             
             
             
            
             
            
             
            
             
            
             
            
             
            
             
            
             
            
             
            
             
              
               
              
               
              
               
              
               
              
               
              
               
              
               
          

    
  
    
  
    
  
    
  
    
  
    
  
    
  
    
  
    
  



 
    
  



 
    
  



 
    
  



 
    
  



 
    
  




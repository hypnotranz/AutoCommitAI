

# Strategy_TrendFollowing.py

from System import *
from QuantConnect import *
from QuantConnect.Data.Market import *
from QuantConnect.Orders import *
from QuantConnect.Indicators import *


class TrendFollowing(QCAlgorithm):

    def Initialize(self):
        self.SetStartDate(2010, 1, 1)   # Set Start Date
        self.SetEndDate(2020, 1, 1)     # Set End Date
        self.SetCash(100000)            # Set Strategy Cash
        
        self.symbol = self.AddEquity("SPY", Resolution.Daily).Symbol
        
        self.fisher = FisherTransform("Fisher", 10)
        self.signal = ExponentialMovingAverage("Signal", 9)
        
        self.atr = AverageTrueRange("ATR", 14)
        
        self.long = False
        self.short = False
        
    def OnData(self, data):
        
        if not (self.fisher.IsReady and self.signal.IsReady and self.atr.IsReady):
            return
        
        if not (self.long or self.short):
            if (self.fisher.Current.Value > self.signal.Current.Value) and (self.fisher.Current.Value < self.fisher.Previous.Value):
                stopPrice = data[self.symbol].Close - (1.5 * self.atr.Current.Value)
                limitPrice = data[self.symbol].Close + (2 * (data[self.symbol].Close - stopPrice))
                quantity = int(self.Portfolio.Cash / data[self.symbol].Close)
                
                if quantity > 0:
                    orderTicket = None
                    if not self.short:
                        orderTicket = self.LimitOrder(self.symbol, -quantity, limitPrice)
                        orderTicket.Update(new UpdateOrderFields { StopPrice = stopPrice })
                        orderTicket.Update(new UpdateOrderFields { Tag = "Short" })
                        
                    elif not self.long:
                        orderTicket = self.LimitOrder(self.symbol, quantity, limitPrice)
                        orderTicket.Update(new UpdateOrderFields { StopPrice = stopPrice })
                        orderTicket.Update(new UpdateOrderFields { Tag = "Long" })
                        
                    if orderTicket is not None and orderTicket.Status == OrderStatus.Filled:
                        if "Long" in orderTicket.Tag:
                            stopMarketTicketLong.StopMarketOrder(self.symbol, -quantity, stopPrice)
                            stopMarketTicketLong.Update(new UpdateOrderFields { Tag="StopLoss"})
                            stopMarketTicketShort.Cancel()
                            
                        elif "Short" in orderTicket.Tag:
                            stopMarketTicketShort.StopMarketOrder(self.symbol, quantity, stopPrice)
                            stopMarketTicketShort.Update(new UpdateOrderFields { Tag="StopLoss"})
                            stopMarketTicketLong.Cancel()
                            
                return
            
            
            elif (self.fisher.Current.Value < -self.signal.Current.Value) and (self.fisher.Current.Value > self.fisher.Previous.Value):
                
                stopPrice = data[self.symbol].Close + (1.5 *self.atr.Current.Value)
                limitPrice= data[self.symbol].Close - (2 * (stopPrice-data[self.symbol].Close))
                quantity=int(self.Portfolio.Cash/data[self.Symbol].Close)

                
                if quantity>0:
                    order_ticket=None
                    if not long_position_opened: 
                        
                        # open a long position with a limit sell-order
                        # the Limit Price should be set at the current price plus twice the amount of the difference between current price 
                        # and the future potential Stop-Loss price based on Average True Range. 
                        
                        order_ticket=self.LimitOrder(self.Symbol,quantity,-limit_price)

                        
                        # set the future Stop-Loss Price based on Average True Range
                        update_fields=UpdateOrderFields()
                        
                         
                        
                    
        
        
        
        
        
        
        
            
        
        
    
        
    
    



        
        

        
        
        
            
        
        
    
        
    
    



        
        

        


        
        
        
            
        
        
    
        
    
    



        
        

        


        
        
        
            
        
        
    
        
    
    



        
        

        


        
        
        
            
        
        
    
        
    
    



        
        

        


        
        
        
            
        
        
    
        
    
    



        
        

        


        
        
        
            
        
        
    
        
    
    



        
        

        


        
        
        
            
        
        
    
        
    
    



        
        

        


        
        
        
            
        
        
    
        
    
    



        
        

        


        
        
        
            
        
        
    
        
    
    



        
        

        





    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    


    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    

    
    
    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
   
    
  
      
                
            
            
            
            
            
            
            
            
            
            
            
            
            




























    
     
            




























    
     
            




























    
     
            




























    
     
            




























    
     
            




























    
     
            




























    
     
            









































































































































































































































































   
    
